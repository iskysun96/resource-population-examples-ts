/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "get_account_balance()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_account_balance_with_arg(account)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_asset_total_supply()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_asset_total_supply_with_arg(asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_app_global_num_uint()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_app_global_num_uint_with_arg(application)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "increment_via_inner()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "increment_via_inner_with_arg(application)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_asset_balance()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_asset_balance_with_arg(account,asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_my_counter()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_my_counter_with_arg(account,application)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMucmVzb3VyY2VfYXZhaWxhYmlsaXR5LmNvbnRyYWN0LlJlc291cmNlQXZhaWxhYmlsaXR5LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmVzb3VyY2VfYXZhaWxhYmlsaXR5L2NvbnRyYWN0LnB5OjUxCiAgICAvLyBjbGFzcyBSZXNvdXJjZUF2YWlsYWJpbGl0eShBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "ResourceAvailability",
    "methods": [
      {
        "name": "get_account_balance",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_account_balance_with_arg",
        "args": [
          {
            "type": "account",
            "name": "acct"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_asset_total_supply",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_asset_total_supply_with_arg",
        "args": [
          {
            "type": "asset",
            "name": "asa"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_app_global_num_uint",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_app_global_num_uint_with_arg",
        "args": [
          {
            "type": "application",
            "name": "app"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "increment_via_inner",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "increment_via_inner_with_arg",
        "args": [
          {
            "type": "application",
            "name": "app"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_asset_balance",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_asset_balance_with_arg",
        "args": [
          {
            "type": "account",
            "name": "acct"
          },
          {
            "type": "asset",
            "name": "asset"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_my_counter",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_my_counter_with_arg",
        "args": [
          {
            "type": "account",
            "name": "acct"
          },
          {
            "type": "application",
            "name": "app"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the ResourceAvailability smart contract.
 */
export type ResourceAvailability = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'get_account_balance()uint64' | 'get_account_balance', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_account_balance_with_arg(account)uint64' | 'get_account_balance_with_arg', {
      argsObj: {
        acct: string | Uint8Array
      }
      argsTuple: [acct: string | Uint8Array]
      returns: bigint
    }>
    & Record<'get_asset_total_supply()uint64' | 'get_asset_total_supply', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_asset_total_supply_with_arg(asset)uint64' | 'get_asset_total_supply_with_arg', {
      argsObj: {
        asa: number | bigint
      }
      argsTuple: [asa: number | bigint]
      returns: bigint
    }>
    & Record<'get_app_global_num_uint()uint64' | 'get_app_global_num_uint', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_app_global_num_uint_with_arg(application)uint64' | 'get_app_global_num_uint_with_arg', {
      argsObj: {
        app: number | bigint
      }
      argsTuple: [app: number | bigint]
      returns: bigint
    }>
    & Record<'increment_via_inner()uint64' | 'increment_via_inner', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'increment_via_inner_with_arg(application)uint64' | 'increment_via_inner_with_arg', {
      argsObj: {
        app: number | bigint
      }
      argsTuple: [app: number | bigint]
      returns: bigint
    }>
    & Record<'get_asset_balance()uint64' | 'get_asset_balance', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_asset_balance_with_arg(account,asset)uint64' | 'get_asset_balance_with_arg', {
      argsObj: {
        acct: string | Uint8Array
        asset: number | bigint
      }
      argsTuple: [acct: string | Uint8Array, asset: number | bigint]
      returns: bigint
    }>
    & Record<'get_my_counter()uint64' | 'get_my_counter', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_my_counter_with_arg(account,application)uint64' | 'get_my_counter_with_arg', {
      argsObj: {
        acct: string | Uint8Array
        app: number | bigint
      }
      argsTuple: [acct: string | Uint8Array, app: number | bigint]
      returns: bigint
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type ResourceAvailabilitySig = keyof ResourceAvailability['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ResourceAvailabilitySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the ResourceAvailability smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ResourceAvailabilitySig> = ResourceAvailability['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ResourceAvailability smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ResourceAvailabilitySig> = ResourceAvailability['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ResourceAvailabilityCreateCalls = (typeof ResourceAvailabilityCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ResourceAvailabilityCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type ResourceAvailabilityDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ResourceAvailabilityCreateCalls) => ResourceAvailabilityCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ResourceAvailabilityCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the ResourceAvailability smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_account_balance()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAccountBalance(args: MethodArgs<'get_account_balance()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_account_balance()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_account_balance_with_arg(account)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAccountBalanceWithArg(args: MethodArgs<'get_account_balance_with_arg(account)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_account_balance_with_arg(account)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.acct],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_asset_total_supply()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAssetTotalSupply(args: MethodArgs<'get_asset_total_supply()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_asset_total_supply()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_asset_total_supply_with_arg(asset)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAssetTotalSupplyWithArg(args: MethodArgs<'get_asset_total_supply_with_arg(asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_asset_total_supply_with_arg(asset)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.asa],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_app_global_num_uint()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAppGlobalNumUint(args: MethodArgs<'get_app_global_num_uint()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_app_global_num_uint()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_app_global_num_uint_with_arg(application)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAppGlobalNumUintWithArg(args: MethodArgs<'get_app_global_num_uint_with_arg(application)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_app_global_num_uint_with_arg(application)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.app],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the increment_via_inner()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static incrementViaInner(args: MethodArgs<'increment_via_inner()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'increment_via_inner()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the increment_via_inner_with_arg(application)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static incrementViaInnerWithArg(args: MethodArgs<'increment_via_inner_with_arg(application)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'increment_via_inner_with_arg(application)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.app],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_asset_balance()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAssetBalance(args: MethodArgs<'get_asset_balance()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_asset_balance()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_asset_balance_with_arg(account,asset)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAssetBalanceWithArg(args: MethodArgs<'get_asset_balance_with_arg(account,asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_asset_balance_with_arg(account,asset)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.acct, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_my_counter()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getMyCounter(args: MethodArgs<'get_my_counter()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_my_counter()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_my_counter_with_arg(account,application)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getMyCounterWithArg(args: MethodArgs<'get_my_counter_with_arg(account,application)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_my_counter_with_arg(account,application)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.acct, args.app],
      ...params,
    }
  }
}

/**
 * A client to make calls to the ResourceAvailability smart contract
 */
export class ResourceAvailabilityClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ResourceAvailabilityClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ResourceAvailability['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the ResourceAvailability smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ResourceAvailabilityDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ResourceAvailabilityCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the ResourceAvailability smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the ResourceAvailability smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the get_account_balance()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAccountBalance(args: MethodArgs<'get_account_balance()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.getAccountBalance(args, params))
  }

  /**
   * Calls the get_account_balance_with_arg(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAccountBalanceWithArg(args: MethodArgs<'get_account_balance_with_arg(account)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.getAccountBalanceWithArg(args, params))
  }

  /**
   * Calls the get_asset_total_supply()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAssetTotalSupply(args: MethodArgs<'get_asset_total_supply()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.getAssetTotalSupply(args, params))
  }

  /**
   * Calls the get_asset_total_supply_with_arg(asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAssetTotalSupplyWithArg(args: MethodArgs<'get_asset_total_supply_with_arg(asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.getAssetTotalSupplyWithArg(args, params))
  }

  /**
   * Calls the get_app_global_num_uint()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAppGlobalNumUint(args: MethodArgs<'get_app_global_num_uint()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.getAppGlobalNumUint(args, params))
  }

  /**
   * Calls the get_app_global_num_uint_with_arg(application)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAppGlobalNumUintWithArg(args: MethodArgs<'get_app_global_num_uint_with_arg(application)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.getAppGlobalNumUintWithArg(args, params))
  }

  /**
   * Calls the increment_via_inner()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public incrementViaInner(args: MethodArgs<'increment_via_inner()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.incrementViaInner(args, params))
  }

  /**
   * Calls the increment_via_inner_with_arg(application)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public incrementViaInnerWithArg(args: MethodArgs<'increment_via_inner_with_arg(application)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.incrementViaInnerWithArg(args, params))
  }

  /**
   * Calls the get_asset_balance()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAssetBalance(args: MethodArgs<'get_asset_balance()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.getAssetBalance(args, params))
  }

  /**
   * Calls the get_asset_balance_with_arg(account,asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAssetBalanceWithArg(args: MethodArgs<'get_asset_balance_with_arg(account,asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.getAssetBalanceWithArg(args, params))
  }

  /**
   * Calls the get_my_counter()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getMyCounter(args: MethodArgs<'get_my_counter()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.getMyCounter(args, params))
  }

  /**
   * Calls the get_my_counter_with_arg(account,application)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getMyCounterWithArg(args: MethodArgs<'get_my_counter_with_arg(account,application)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ResourceAvailabilityCallFactory.getMyCounterWithArg(args, params))
  }

  public compose(): ResourceAvailabilityComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getAccountBalance(args: MethodArgs<'get_account_balance()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAccountBalance(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAccountBalanceWithArg(args: MethodArgs<'get_account_balance_with_arg(account)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAccountBalanceWithArg(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAssetTotalSupply(args: MethodArgs<'get_asset_total_supply()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAssetTotalSupply(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAssetTotalSupplyWithArg(args: MethodArgs<'get_asset_total_supply_with_arg(asset)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAssetTotalSupplyWithArg(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAppGlobalNumUint(args: MethodArgs<'get_app_global_num_uint()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAppGlobalNumUint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAppGlobalNumUintWithArg(args: MethodArgs<'get_app_global_num_uint_with_arg(application)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAppGlobalNumUintWithArg(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      incrementViaInner(args: MethodArgs<'increment_via_inner()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.incrementViaInner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      incrementViaInnerWithArg(args: MethodArgs<'increment_via_inner_with_arg(application)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.incrementViaInnerWithArg(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAssetBalance(args: MethodArgs<'get_asset_balance()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAssetBalance(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAssetBalanceWithArg(args: MethodArgs<'get_asset_balance_with_arg(account,asset)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAssetBalanceWithArg(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getMyCounter(args: MethodArgs<'get_my_counter()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getMyCounter(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getMyCounterWithArg(args: MethodArgs<'get_my_counter_with_arg(account,application)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getMyCounterWithArg(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ResourceAvailabilityComposer
  }
}
export type ResourceAvailabilityComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_account_balance()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAccountBalance(args: MethodArgs<'get_account_balance()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'get_account_balance()uint64'>]>

  /**
   * Calls the get_account_balance_with_arg(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAccountBalanceWithArg(args: MethodArgs<'get_account_balance_with_arg(account)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'get_account_balance_with_arg(account)uint64'>]>

  /**
   * Calls the get_asset_total_supply()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetTotalSupply(args: MethodArgs<'get_asset_total_supply()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'get_asset_total_supply()uint64'>]>

  /**
   * Calls the get_asset_total_supply_with_arg(asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetTotalSupplyWithArg(args: MethodArgs<'get_asset_total_supply_with_arg(asset)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'get_asset_total_supply_with_arg(asset)uint64'>]>

  /**
   * Calls the get_app_global_num_uint()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAppGlobalNumUint(args: MethodArgs<'get_app_global_num_uint()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'get_app_global_num_uint()uint64'>]>

  /**
   * Calls the get_app_global_num_uint_with_arg(application)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAppGlobalNumUintWithArg(args: MethodArgs<'get_app_global_num_uint_with_arg(application)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'get_app_global_num_uint_with_arg(application)uint64'>]>

  /**
   * Calls the increment_via_inner()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  incrementViaInner(args: MethodArgs<'increment_via_inner()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'increment_via_inner()uint64'>]>

  /**
   * Calls the increment_via_inner_with_arg(application)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  incrementViaInnerWithArg(args: MethodArgs<'increment_via_inner_with_arg(application)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'increment_via_inner_with_arg(application)uint64'>]>

  /**
   * Calls the get_asset_balance()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetBalance(args: MethodArgs<'get_asset_balance()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'get_asset_balance()uint64'>]>

  /**
   * Calls the get_asset_balance_with_arg(account,asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetBalanceWithArg(args: MethodArgs<'get_asset_balance_with_arg(account,asset)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'get_asset_balance_with_arg(account,asset)uint64'>]>

  /**
   * Calls the get_my_counter()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMyCounter(args: MethodArgs<'get_my_counter()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'get_my_counter()uint64'>]>

  /**
   * Calls the get_my_counter_with_arg(account,application)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMyCounterWithArg(args: MethodArgs<'get_my_counter_with_arg(account,application)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, MethodReturn<'get_my_counter_with_arg(account,application)uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the ResourceAvailability smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): ResourceAvailabilityComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ResourceAvailabilityComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<ResourceAvailabilityComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<ResourceAvailabilityComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type ResourceAvailabilityComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type ResourceAvailabilityComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
