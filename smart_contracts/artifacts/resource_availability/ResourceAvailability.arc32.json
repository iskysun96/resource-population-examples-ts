{
    "hints": {
        "get_account_balance()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_account_balance_with_arg(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_total_supply()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_total_supply_with_arg(asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_app_global_num_uint()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_app_global_num_uint_with_arg(application)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "increment_via_inner()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "increment_via_inner_with_arg(application)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_balance()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_balance_with_arg(account,asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_my_counter()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_my_counter_with_arg(account,application)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMucmVzb3VyY2VfYXZhaWxhYmlsaXR5LmNvbnRyYWN0LlJlc291cmNlQXZhaWxhYmlsaXR5LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmVzb3VyY2VfYXZhaWxhYmlsaXR5L2NvbnRyYWN0LnB5OjUxCiAgICAvLyBjbGFzcyBSZXNvdXJjZUF2YWlsYWJpbGl0eShBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ResourceAvailability",
        "methods": [
            {
                "name": "get_account_balance",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_account_balance_with_arg",
                "args": [
                    {
                        "type": "account",
                        "name": "acct"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_asset_total_supply",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_asset_total_supply_with_arg",
                "args": [
                    {
                        "type": "asset",
                        "name": "asa"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_app_global_num_uint",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_app_global_num_uint_with_arg",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "increment_via_inner",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "increment_via_inner_with_arg",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_asset_balance",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_asset_balance_with_arg",
                "args": [
                    {
                        "type": "account",
                        "name": "acct"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_my_counter",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_my_counter_with_arg",
                "args": [
                    {
                        "type": "account",
                        "name": "acct"
                    },
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}